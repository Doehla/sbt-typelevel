/*
 * Copyright 2022 Typelevel
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.typelevel.sbt.mergify

import sbt._, Keys._
import org.typelevel.sbt.gha._

object MergifyPlugin extends AutoPlugin {

  object autoImport {
    lazy val mergifyGenerate = taskKey[Unit](
      "Generates (and overwrites if extant) a .mergify.yml according to configuration")
    lazy val mergifyCheck = taskKey[Unit](
      "Checks to see if the .mergify.yml files are equivalent to what would be generated and errors if otherwise")

    lazy val mergifyPrRules = settingKey[Seq[MergifyPrRule]]("The mergify pull request rules")

    lazy val mergifyStewardConfig = settingKey[Option[MergifyStewardConfig]](
      "Config for the automerge rule for Scala Steward PRs, set to None to disable.")

    lazy val mergifyRequiredJobs =
      settingKey[Seq[String]]("Ids for jobs that must succeed for merging (default: [build])")

    lazy val mergifySuccessConditions = settingKey[Seq[MergifyCondition]](
      "Success conditions for merging (default: auto-generated from `mergifyRequiredJobs` setting)")
  }

  override def requires = GenerativePlugin
  override def trigger: PluginTrigger = allRequirements

  import autoImport._
  import GenerativePlugin.autoImport._

  override def buildSettings: Seq[Setting[_]] = Seq(
    mergifyStewardConfig := Some(MergifyStewardConfig()),
    mergifyRequiredJobs := Seq("build"),
    mergifySuccessConditions := jobSuccessConditions.value,
    mergifyPrRules := {
      mergifyStewardConfig.value.map(_.toPrRule(mergifySuccessConditions.value.toList)).toList
    },
    mergifyGenerate := {
      IO.write(
        (ThisBuild / baseDirectory).value / ".mergify.yml",
        generateMergifyContents.value)
    }
  )

  override def projectSettings: Seq[Setting[_]] = Seq(
    mergifyGenerate / aggregate := false,
    mergifyCheck / aggregate := false
  )

  private lazy val jobSuccessConditions = Def.setting {
    githubWorkflowGeneratedCI.value.flatMap {
      case job if mergifyRequiredJobs.value.contains(job.id) =>
        GenerativePlugin
          .expandMatrix(
            job.oses,
            job.scalas,
            job.javas,
            job.matrixAdds,
            job.matrixIncs,
            job.matrixExcs
          )
          .map { cell =>
            MergifyCondition.Custom(s"status-success=${job.name} (${cell.mkString(", ")})")
          }
      case _ => Nil
    }
  }

  private lazy val generateMergifyContents = Def.task {
    import _root_.io.circe.syntax._
    import _root_.io.circe.yaml.syntax._

    val contents = Map("pull_request_rules" -> mergifyPrRules.value.toList)

    s"""|# This file was automatically generated by sbt-typelevel-mergify using the
        |# mergifyGenerate task. You should add and commit this file to
        |# your git repository. It goes without saying that you shouldn't edit
        |# this file by hand! Instead, if you wish to make changes, you should
        |# change your sbt build configuration to revise the mergify configuration
        |# to meet your needs, then regenerate this file.
        |${contents.asJson.asYaml.spaces2}
        |""".stripMargin
  }

}
